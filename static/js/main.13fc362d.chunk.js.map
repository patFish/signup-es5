{"version":3,"sources":["container/FormikField.js","container/FormikSelect.js","container/Signup.js","container/RiskForm.js","App.js","serviceWorker.js","index.js"],"names":["FormikField","name","label","type","required","Fragment","as","TextField","fullWidth","helperText","MaterialUISelectField","errorString","children","value","onChange","onBlur","FormControl","InputLabel","Select","FormHelperText","FormikSelect","items","map","item","MenuItem","key","INITIALVALUES","positionItems","SIGNUPSCHEMA","Yup","shape","min","email","lowercase","notOneOf","password","matches","passwordConfirm","oneOf","position","Signup","initialValues","onSubmit","values","alert","JSON","stringify","validationSchema","dirty","isValid","Button","variant","color","disabled","RiskForm","useStyles","makeStyles","theme","paper","marginTop","spacing","marginBottom","padding","breakpoints","up","layout","width","marginLeft","marginRight","App","classes","className","CssBaseline","Paper","exact","path","render","props","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.13fc362d.chunk.js","sourcesContent":["import React from 'react'\nimport { Field, ErrorMessage } from 'formik'\nimport TextField from '@material-ui/core/TextField'\n\nconst FormikField = ({ name, label, type = 'text', required = false }) => {\n  return (\n    <React.Fragment>\n      <Field\n        required={required}\n        as={TextField}\n        fullWidth\n        label={label}\n        name={name}\n        type={type}\n        helperText={<ErrorMessage name={name} />}\n      />\n    </React.Fragment>\n  )\n}\n\nexport default FormikField\n","import React from 'react'\nimport { FormControl, MenuItem, InputLabel, Select, FormHelperText } from '@material-ui/core'\nimport { Field, ErrorMessage } from 'formik'\n\nconst MaterialUISelectField = ({\n  errorString,\n  label,\n  children,\n  value,\n  name,\n  onChange,\n  onBlur,\n  required,\n}) => {\n  return (\n    <FormControl fullWidth>\n      <InputLabel required={required}>{label}</InputLabel>\n      <Select name={name} onChange={onChange} onBlur={onBlur} value={value}>\n        {children}\n      </Select>\n      <FormHelperText>{errorString}</FormHelperText>\n    </FormControl>\n  )\n}\n\nconst FormikSelect = ({ name, items, label, required = false }) => {\n  return (\n    <React.Fragment>\n      <Field\n        name={name}\n        as={MaterialUISelectField}\n        label={label}\n        errorString={<ErrorMessage name={name} />}\n        required={required}\n      >\n        {items.map(item => (\n          <MenuItem key={item.value} value={item.value}>\n            {item.label}\n          </MenuItem>\n        ))}\n      </Field>\n    </React.Fragment>\n  )\n}\n\nexport default FormikSelect\n","// Signup.js\n\nimport React from 'react'\nimport { Formik, Form } from 'formik'\nimport * as Yup from 'yup'\nimport FormikField from './FormikField'\nimport FormikSelect from './FormikSelect'\nimport { Button } from '@material-ui/core'\n\nconst INITIALVALUES = {}\nconst positionItems = [\n  {\n    label: 'Front End',\n    value: 'front_end',\n  },\n  {\n    label: 'Back End',\n    value: 'back_end',\n  },\n  {\n    label: 'Dev Ops',\n    value: 'dev_ops',\n  },\n  {\n    label: 'QA',\n    value: 'qa',\n  },\n]\n\nconst emailAddresses = ['test@gmail.com', 'test2@gmail.com', 'test3@gmail.com']\nconst lowercaseRegex = /(?=.*[a-z])/\nconst uppercaseRegex = /(?=.*[A-Z])/\nconst numericRegex = /(?=.*[0-9])/\nconst SIGNUPSCHEMA = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .required('Required'),\n  email: Yup.string()\n    .lowercase()\n    .email('Must be a valid email!')\n    .notOneOf(emailAddresses, 'Email already taken!')\n    .required('Required!'),\n  password: Yup.string()\n    .matches(lowercaseRegex, 'one lowercase required!')\n    .matches(uppercaseRegex, 'one uppercase required!')\n    .matches(numericRegex, 'one number required!')\n    .min(8, 'Minimum 8 characters required!')\n    .required('Required!'),\n  passwordConfirm: Yup.string()\n    .oneOf([Yup.ref('password')], 'Password must be the same!')\n    .required('Required!'),\n  position: Yup.string().required('Required'),\n})\n\nconst Signup = () => {\n  const handleSubmit = values => {\n    alert(JSON.stringify(values))\n  }\n\n  return (\n    <React.Fragment>\n      <h1>Sign Up</h1>\n      <Formik initialValues={INITIALVALUES} onSubmit={handleSubmit} validationSchema={SIGNUPSCHEMA}>\n        {({ dirty, isValid }) => {\n          return (\n            <Form>\n              <FormikField name=\"name\" label=\"Name\" required />\n              <FormikField name=\"email\" label=\"Email\" required />\n              <FormikField name=\"password\" label=\"Password\" required type=\"password\" />\n              <FormikField\n                name=\"passwordConfirm\"\n                label=\"Confirm Password\"\n                required\n                type=\"password\"\n              />\n              <FormikSelect name=\"position\" items={positionItems} label=\"Position\" required />\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={!dirty || !isValid}\n                type=\"submit\"\n              >\n                Primary\n              </Button>\n            </Form>\n          )\n        }}\n      </Formik>\n    </React.Fragment>\n  )\n}\n\nexport default Signup\n","// Form.js\n\nimport React from 'react'\nimport Signup from './Signup'\n\nconst RiskForm = () => {\n  return (\n    <div>\n      <Signup />\n    </div>\n  )\n}\n\nexport default RiskForm\n","import React from 'react'\nimport './App.css'\nimport RiskForm from './container/RiskForm'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { Paper, CssBaseline, makeStyles } from '@material-ui/core'\n\nconst useStyles = makeStyles(theme=>({\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3),\n    },\n  },layout: {\n    width: 'auto',\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 600,\n      marginLeft: 'auto',\n      marginRight: 'auto',\n    },\n  }\n}))\n\nfunction App() {\n  const classes = useStyles()\n  return (\n    <div className=\"App\">\n    <CssBaseline />\n    <div className={classes.layout}>\n      <Paper className={classes.paper}>\n        <Router>\n          <Switch>\n            <Route exact path={'/'} render={props => <RiskForm {...props} />} />\n          </Switch>\n        </Router>\n      </Paper>\n    </div></div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}